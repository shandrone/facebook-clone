{"version":3,"sources":["StateProvider.js","Firebase.js","Header.js","reducer.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","GoogleAuthProvider","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Header","actionTypes","state","action","console","log","type","user","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yeAEaA,GCaSC,IAASC,cAZR,CACnBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKMC,YACVV,IAASW,OACL,IAAIX,IAASW,KAAKC,mB,+BDhBTC,2BAEfC,EAAgB,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,aAAcC,EAAzB,EAAyBA,SAAzB,OACzB,kBAAClB,EAAamB,SAAd,CAAuBC,MAASC,qBAAYL,EAAQC,IAC/CC,IAKII,EAAgB,kBAAMC,qBAAWvB,I,gIEkE/BwB,I,QCzEFC,EACC,WAgBCT,EAbC,SAACU,EAAOC,GAEpB,OADAC,QAAQC,IAAIF,GACJA,EAAOG,MACX,KAAKL,EACD,OAAO,2BACAC,GADP,IAEIK,KAAMJ,EAAOI,OAErB,QACI,OAAOL,I,gDCgBJM,MAvBf,WAAgB,IAAD,EAEcV,IAFd,wBAELS,KAFK,MCEKE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAevB,aHXS,CACxBc,KAAM,MGUuCf,QAAWA,GACxD,kBAAC,EAAD,QAGFyB,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.2f62d165.chunk.js","sourcesContent":["import React, {createContext, useContext, useReducer} from \"react\";\r\n\r\nexport const StateContext = createContext();//preparing data layer\r\n//wrap the application in the state provider\r\nexport const StateProvider = ({reducer, initialState, children}) =>(\r\n    <StateContext.Provider value = {useReducer (reducer,initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);\r\n\r\n//using useStateValue >> data pulling\r\nexport const useStateValue = () => useContext(StateContext);","// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nimport firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAseI1ZvP_KGV6x5yCsFNtEovWkYBVqiqk\",\r\n    authDomain: \"social-app-10db7.firebaseapp.com\",\r\n    databaseURL: \"https://social-app-10db7.firebaseio.com\",\r\n    projectId: \"social-app-10db7\",\r\n    storageBucket: \"social-app-10db7.appspot.com\",\r\n    messagingSenderId: \"504441149666\",\r\n    appId: \"1:504441149666:web:138b63ee4d702d470c66bb\",\r\n    measurementId: \"G-Z4FNL0V1GW\"\r\n  };\r\n\r\n  //connecting react front end with firebase\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const db = firebaseApp.firestore(); //connecting firebase database with this application\r\n  const auth = firebase.auth(); //firebase authorization\r\n  const provider = new firebase.auth.GoogleAuthProvider(); // we want the google login service here\r\n\r\n\r\n  export {auth, provider};\r\n  export default db;\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport \"./Header.css\"\r\nimport SearchIcon from \"@material-ui/icons/SearchRounded\"\r\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined';\r\nimport EmojiFlagsOutlinedIcon from '@material-ui/icons/EmojiFlagsOutlined';\r\nimport SubscriptionsOutlinedIcon from '@material-ui/icons/SubscriptionsOutlined';\r\nimport StoreMallDirectoryOutlinedIcon from '@material-ui/icons/StoreMallDirectoryOutlined';\r\nimport PeopleAltOutlinedIcon from '@material-ui/icons/PeopleAltOutlined';\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\r\nimport ForumOutlinedIcon from '@material-ui/icons/ForumOutlined';\r\nimport NotificationImportantOutlinedIcon from '@material-ui/icons/NotificationImportantOutlined';\r\nimport ArrowDropDownCircleOutlinedIcon from '@material-ui/icons/ArrowDropDownCircleOutlined';\r\nimport { useStateValue } from './StateProvider';\r\n\r\nfunction Header() {\r\n    const [{user}, dispatch] = useStateValue();\r\n    return (\r\n        <div className = \"header\">\r\n\r\n             <div className = \"header_left\" >\r\n                 <img src= \"https://www.informaticsinc.com/application/files/5615/1456/2706/5PopularSocialMediaSitesandthecompaniesusingthem-900.jpg\" />\r\n                 <div className = \"header_input\">\r\n                     <SearchIcon />\r\n                     <input placeholder=\"Search\" type = \"text\" />\r\n\r\n                 </div>\r\n             </div>\r\n\r\n             <div className = \"header_center\" >\r\n                 <div className =\"header_option \r\n                 header_option--active\" >\r\n                    <HomeOutlinedIcon />\r\n                 </div>\r\n                 <div className =\"header_option\" >\r\n                    <EmojiFlagsOutlinedIcon />\r\n                 </div>\r\n                 <div className =\"header_option\" >\r\n                    <SubscriptionsOutlinedIcon />\r\n                 </div>\r\n                 <div className =\"header_option\" >\r\n                    <StoreMallDirectoryOutlinedIcon />\r\n                 </div><div className =\"header_option\" >\r\n                    <PeopleAltOutlinedIcon />\r\n                 </div>\r\n                 \r\n             </div>\r\n\r\n             <div className = \"header_right\" >\r\n                <div className = \"header_info\">\r\n                    <Avatar src = {user.photoURL} />\r\n                    <h4>{user.displayName} </h4>\r\n                </div>\r\n                <div>\r\n\r\n                    <IconButton>\r\n                        <AddCircleOutlineOutlinedIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <ForumOutlinedIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <NotificationImportantOutlinedIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <ArrowDropDownCircleOutlinedIcon />\r\n                    </IconButton>\r\n                    \r\n\r\n                </div>\r\n\r\n             </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","export const initialState = {\r\n    user: null,\r\n};\r\n\r\nexport const actionTypes = {\r\n    SET_USER: \"SET_USER\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    console.log(action);\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                ...state,\r\n                user: action.user, // chnaing user that is set from the login\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport \"./App.css\"\nimport Feed from './Feed';\nimport Header from \"./Header\"\nimport Login from './Login';\nimport Sidebar from './Sidebar';\nimport { useStateValue } from './StateProvider';\nimport Widget from './Widget';\n\n\nfunction App() {\n\n  const [{user}, dispatch] = useStateValue();\n  \n  return (\n\n     //if there are no user then show \"Login\" if user is logged in show mainpage\n    <div className=\"app\">      \n      {!user? ( <Login /> ) : (\n        <>\n        <Header />\n\n        <div className = \"app_body\">\n          <Sidebar />\n          <Feed />\n          <Widget />\n        </div>\n        </>\n      )}   \n    </div>\n  );\n}\n                               \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer, { initialState } from './reducer';\nimport { StateProvider } from './StateProvider';\n\n//wrapping App withing StateProvider\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState = {initialState} reducer = {reducer} > \n    <App />\n    </StateProvider>    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}